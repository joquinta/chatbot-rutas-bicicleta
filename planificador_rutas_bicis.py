# -*- coding: utf-8 -*-
"""Planificador_rutas_bicis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DEw4XYYPsb5xnfTfW6U_BYdbXKEGGTW7
"""

import streamlit as st
from datetime import datetime, timedelta
import json
import requests
import re
from langchain.adapters.openai import convert_openai_messages
from langchain_community.chat_models import ChatOpenAI
import os
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Claves API
OWM_API_KEY = os.getenv("OWM_API_KEY")  # OpenWeatherMap
ORS_API_KEY = os.getenv("ORS_API_KEY")  # OpenRouteService
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # OpenAI

# Funci√≥n para obtener latitud y longitud de un lugar
def obtener_coordenadas(lugar):
    lugar_busqueda = f"{lugar},cl"  # Forzar b√∫squeda en Chile
    url = f"http://api.openweathermap.org/geo/1.0/direct?q={lugar_busqueda}&limit=1&appid={OWM_API_KEY}"
    respuesta = requests.get(url).json()

    if not respuesta:
        st.warning(f"No se encontraron coordenadas para {lugar}.")
        return None, None

    return respuesta[0]["lat"], respuesta[0]["lon"]

# Funci√≥n para calcular distancia y tiempo con OpenRouteService
def calcular_distancia_tiempo(puntos):
    coords = [[puntos["inicio"]["lon"], puntos["inicio"]["lat"]]]

    if "intermedios" in puntos and puntos["intermedios"]:
        for intermedio in puntos["intermedios"]:
            coords.append([intermedio["lon"], intermedio["lat"]])

    coords.append([puntos["destino"]["lon"], puntos["destino"]["lat"]])

    url = "https://api.openrouteservice.org/v2/directions/cycling-regular"
    headers = {"Authorization": ORS_API_KEY, "Content-Type": "application/json"}
    data = {"coordinates": coords, "format": "json"}

    respuesta = requests.post(url, headers=headers, json=data).json()

    if "routes" not in respuesta:
        st.error("Error en la API de OpenRouteService.")
        return None, None

    distancia_total = respuesta["routes"][0]["summary"]["distance"] / 1000  # Convertir a km
    tiempo_total = respuesta["routes"][0]["summary"]["duration"] / 3600  # Convertir a horas

    return distancia_total, tiempo_total

# Funci√≥n para obtener clima en un punto y momento espec√≠fico
def obtener_clima(lat, lon, fecha_hora):
    url = f"https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={OWM_API_KEY}&units=metric&lang=es"
    respuesta = requests.get(url).json()

    if respuesta.get("cod") != "200":
        return {"temperatura": "N/A", "condiciones": "No disponible", "viento": "N/A", "fecha_usada": fecha_hora.strftime('%Y-%m-%d %H:%M')}

    predicciones_futuras = [p for p in respuesta["list"] if datetime.utcfromtimestamp(p["dt"]) >= fecha_hora]

    if not predicciones_futuras:
        return {"temperatura": "N/A", "condiciones": "No disponible", "viento": "N/A", "fecha_usada": fecha_hora.strftime('%Y-%m-%d %H:%M')}

    mejor_prediccion = min(predicciones_futuras, key=lambda x: datetime.utcfromtimestamp(x["dt"]))

    viento_kmh = round(mejor_prediccion["wind"]["speed"] * 3.6, 1)

    return {
        "temperatura": int(mejor_prediccion['main']['temp']),
        "condiciones": mejor_prediccion["weather"][0]["description"].capitalize(),
        "viento": viento_kmh,
        "fecha_usada": datetime.utcfromtimestamp(mejor_prediccion["dt"]).strftime('%Y-%m-%d %H:%M')
    }

# Interfaz de Streamlit
st.title("Planificador de Rutas de Bicicleta en Chile üö¥‚Äç‚ôÇÔ∏è")

query = st.text_input("Ingresa tu ruta:", placeholder="Ej: Saldr√© a pedalear el 8 de febrero a las 8:00 desde Osorno hasta Valdivia.", key="input")

if query:
    # Prompt para extraer la informaci√≥n
    extract_prompt = [
        {"role": "system", "content": "Extrae los siguientes datos en JSON puro:\n"
         "{\n"
         "  \"hora_salida\": \"YYYY-MM-DD HH:MM\",\n"
         "  \"lugares\": {\n"
         "    \"inicio\": \"Nombre del lugar de inicio\",\n"
         "    \"intermedios\": [\"Nombre del punto intermedio 1\", \"Nombre del punto intermedio 2\"],\n"
         "    \"destino\": \"Nombre del destino final\"\n"
         "  }\n"
         "}"},
        {"role": "user", "content": query}
    ]

    lc_messages = convert_openai_messages(extract_prompt)
    response = ChatOpenAI(model='gpt-4', openai_api_key=OPENAI_API_KEY).invoke(lc_messages).content

    match = re.search(r"\{.*\}", response, re.DOTALL)
    if match:
        try:
            extracted_data = json.loads(match.group(0))
        except json.JSONDecodeError:
            st.error("Error al decodificar JSON.")
            extracted_data = None
    else:
        st.error("No se encontr√≥ JSON en la respuesta.")
        extracted_data = None

    if extracted_data:
        puntos = {"inicio": {}, "destino": {}, "intermedios": []}

        puntos["inicio"]["nombre"] = extracted_data["lugares"]["inicio"]
        puntos["inicio"]["lat"], puntos["inicio"]["lon"] = obtener_coordenadas(puntos["inicio"]["nombre"])

        puntos["destino"]["nombre"] = extracted_data["lugares"]["destino"]
        puntos["destino"]["lat"], puntos["destino"]["lon"] = obtener_coordenadas(puntos["destino"]["nombre"])

        if "intermedios" in extracted_data["lugares"]:
            for intermedio in extracted_data["lugares"]["intermedios"]:
                lat, lon = obtener_coordenadas(intermedio)
                if lat and lon:
                    puntos["intermedios"].append({"nombre": intermedio, "lat": lat, "lon": lon})

        distancia, tiempo_estimado = calcular_distancia_tiempo(puntos)

        hora_salida = datetime.strptime(extracted_data["hora_salida"], "%Y-%m-%d %H:%M")
        hora_salida = hora_salida.replace(year=2025)  # Asegurar que siempre sea 2025

        climas = []
        clima_inicio = obtener_clima(puntos["inicio"]["lat"], puntos["inicio"]["lon"], hora_salida)
        climas.append({"nombre": puntos["inicio"]["nombre"], "clima": clima_inicio, "hora_estimada": hora_salida})

        for i, punto in enumerate(puntos["intermedios"]):
            hora_estimada = hora_salida + timedelta(hours=(i + 1) * tiempo_estimado / (len(puntos["intermedios"]) + 1))
            clima_intermedio = obtener_clima(punto["lat"], punto["lon"], hora_estimada)
            climas.append({"nombre": punto["nombre"], "clima": clima_intermedio, "hora_estimada": hora_estimada})

        clima_destino = obtener_clima(puntos["destino"]["lat"], puntos["destino"]["lon"], hora_salida + timedelta(hours=tiempo_estimado))
        climas.append({"nombre": puntos["destino"]["nombre"], "clima": clima_destino, "hora_estimada": hora_salida + timedelta(hours=tiempo_estimado)})

        st.success("### Resumen de la ruta:")
        st.write(f"Fecha utilizada para el clima: {clima_inicio['fecha_usada']}")
        st.write(f"Distancia: {distancia:.2f} km | Tiempo estimado: {tiempo_estimado:.2f} horas")


