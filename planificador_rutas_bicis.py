# -*- coding: utf-8 -*-
"""Planificador_rutas_bicis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DEw4XYYPsb5xnfTfW6U_BYdbXKEGGTW7
"""

import streamlit as st
from datetime import datetime, timedelta
import json
import requests
import re
from langchain.adapters.openai import convert_openai_messages
from langchain_community.chat_models import ChatOpenAI

# Claves API (debes definirlas)
# OWM_API_KEY = "TU_OPENWEATHERMAP_API_KEY"
# ORS_API_KEY = "TU_OPENROUTESERVICE_API_KEY"
# OPENAI_API_KEY = "TU_OPENAI_API_KEY"

# Funciones ya definidas: obtener_coordenadas, calcular_distancia_tiempo, obtener_clima

def main():
    st.title('Planificador de Rutas en Bicicleta')
    
    # Entrada del usuario
    query = st.text_input("Ingresa tu ruta de bicicleta:", 
                          "Saldre a pedalear el 8 de febrero del 2025 a las 8:00 desde osorno,cl, pasando por la san pablo,cl, la uni√≥n,cl y valdivia,cl.")
    
    if st.button("Calcular Ruta"):
        # Paso 2: Extraer informaci√≥n clave con OpenAI
        extract_prompt = [
            {"role": "system", "content": "Extrae los siguientes datos en **JSON puro**, sin explicaciones:\n"
                                         "{\n"
                                         "  \"hora_salida\": \"YYYY-MM-DD HH:MM\",\n"
                                         "  \"lugares\": {\n"
                                         "    \"inicio\": \"Nombre del lugar de inicio\",\n"
                                         "    \"intermedios\": [\"Nombre del punto intermedio opcional 1\", \"Nombre del punto intermedio opcional 2\"],\n"
                                         "    \"destino\": \"Nombre del destino final\"\n"
                                         "  }\n"
                                         "}"},
            {"role": "user", "content": query}
        ]
        
        lc_messages = convert_openai_messages(extract_prompt)
        response = ChatOpenAI(model='gpt-4o-mini', openai_api_key=OPENAI_API_KEY).invoke(lc_messages).content
        
        match = re.search(r"\{.*\}", response, re.DOTALL)
        if match:
            try:
                extracted_data = json.loads(match.group(0))
            except json.JSONDecodeError:
                st.error("Error al decodificar JSON. Respuesta del modelo.")
                extracted_data = None
        else:
            st.error("No se encontr√≥ JSON en la respuesta del modelo.")
            extracted_data = None

        if not extracted_data:
            return

        # Obtener coordenadas de los puntos
        puntos = {"inicio": {}, "destino": {}, "intermedios": []}
        puntos["inicio"]["nombre"] = extracted_data["lugares"]["inicio"]
        puntos["inicio"]["lat"], puntos["inicio"]["lon"] = obtener_coordenadas(puntos["inicio"]["nombre"])

        puntos["destino"]["nombre"] = extracted_data["lugares"]["destino"]
        puntos["destino"]["lat"], puntos["destino"]["lon"] = obtener_coordenadas(puntos["destino"]["nombre"])

        if "intermedios" in extracted_data["lugares"] and extracted_data["lugares"]["intermedios"]:
            for intermedio in extracted_data["lugares"]["intermedios"]:
                lat, lon = obtener_coordenadas(intermedio)
                if lat and lon:
                    puntos["intermedios"].append({"nombre": intermedio, "lat": lat, "lon": lon})

        # Calcular distancia y tiempo
        distancia, tiempo_estimado = calcular_distancia_tiempo(puntos)

        # Obtener clima en los puntos clave
        hora_salida = datetime.strptime(extracted_data["hora_salida"], "%Y-%m-%d %H:%M")
        clima_inicio = obtener_clima(puntos["inicio"]["lat"], puntos["inicio"]["lon"], hora_salida)
        clima_destino = obtener_clima(puntos["destino"]["lat"], puntos["destino"]["lon"], hora_salida + timedelta(hours=tiempo_estimado))

        climas_intermedios = []
        for i, punto in enumerate(puntos["intermedios"]):
            tiempo_parcial = (i + 1) * (tiempo_estimado / (len(puntos["intermedios"]) + 1))
            clima_intermedio = obtener_clima(punto["lat"], punto["lon"], hora_salida + timedelta(hours=tiempo_parcial))
            climas_intermedios.append({"nombre": punto["nombre"], "clima": clima_intermedio})

        # Mostrar resultados en Streamlit
        st.write(f"üö¥‚Äç‚ôÇÔ∏è **Distancia total**: {distancia:.2f} km")
        st.write(f"‚è≥ **Tiempo estimado**: {tiempo_estimado:.2f} horas")
        st.write(f"üå§Ô∏è **Clima en {puntos['inicio']['nombre']}**: {clima_inicio}")
        st.write(f"üå§Ô∏è **Clima en {puntos['destino']['nombre']}**: {clima_destino}")
        for clima in climas_intermedios:
            st.write(f"üå§Ô∏è **Clima en {clima['nombre']}**: {clima['clima']}")

if __name__ == "__main__":
    main()

